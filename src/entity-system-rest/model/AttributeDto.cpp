/**
 * Inexor Entity System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@inexor.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AttributeDto.hpp"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace inexor {
namespace entity_system {
namespace rest {
namespace model {

	AttributeDto::AttributeDto()
	{
		attribute_uuid = "";
		name = "";
	}

	AttributeDto::~AttributeDto()
	{
	}

	std::string AttributeDto::to_json_string()
	{
		std::stringstream ss;
		ptree pt;
		pt.put("attribute_uuid", attribute_uuid);
		pt.put("name", name);
		switch (value.type)
		{
			case ENTSYS_DATA_TYPE_BOOL:
				pt.put("datatype", "bool");
				pt.put("value", std::get<ENTSYS_DATA_TYPE_BOOL>(value.value));
				break;
			case ENTSYS_DATA_TYPE_INT:
				pt.put("datatype", "int");
				pt.put("value", std::get<ENTSYS_DATA_TYPE_INT>(value.value));
				break;
			case ENTSYS_DATA_TYPE_BIG_INT:
				pt.put("datatype", "big_int");
				pt.put("value", std::get<ENTSYS_DATA_TYPE_BIG_INT>(value.value));
				break;
			case ENTSYS_DATA_TYPE_DOUBLE:
				pt.put("datatype", "double");
				pt.put("value", std::get<ENTSYS_DATA_TYPE_DOUBLE>(value.value));
				break;
			case ENTSYS_DATA_TYPE_FLOAT:
				pt.put("datatype", "float");
				pt.put("value", std::get<ENTSYS_DATA_TYPE_FLOAT>(value.value));
				break;
			case ENTSYS_DATA_TYPE_STRING:
				pt.put("datatype", "string");
				pt.put("value", std::get<ENTSYS_DATA_TYPE_STRING>(value.value));
				break;
//			case ENTSYS_DATA_TYPE_VEC3:
//				pt.put("datatype", "vec3");
//				pt.put("value", std::get<ENTSYS_DATA_TYPE_VEC3>(value.value));
//				break;
//			case ENTSYS_DATA_TYPE_VEC4:
//				pt.put("datatype", "vec4");
//				pt.put("value", std::get<ENTSYS_DATA_TYPE_VEC4>(value.value));
//				break;
			default:
				pt.put("datatype", "");
				pt.put("value", "");
				break;
		}
		write_json(ss, pt, false);
		return ss.str();
	}

	void AttributeDto::from_json_string(std::string const& jsonString)
	{
		std::stringstream ss(jsonString);
		ptree pt;
		read_json(ss,pt);
		attribute_uuid = pt.get("attribute_uuid", "");
		name = pt.get("name", "");
		std::string datatype = pt.get("datatype", "");
//		if ("bool" == datatype)
//		{
//			value = {}
//		}
	}

	std::string AttributeDto::get_attribute_uuid() const
	{
		return attribute_uuid;
	}

	void AttributeDto::set_attribute_uuid(std::string attribute_uuid)
	{
		this->attribute_uuid = attribute_uuid;
	}

	std::string AttributeDto::get_name() const
	{
		return name;
	}

	void AttributeDto::set_name(std::string name)
	{
		this->name = name;
	}

	DataContainer AttributeDto::get_value() const
	{
		return value;
	}

	void AttributeDto::set_value(DataContainer value)
	{
		this->value = value;
	}

}
}
}
}

